#!/bin/bash

# Script para rota√ß√£o de chave secreta
# Gera uma nova chave aleat√≥ria e atualiza o config.json

echo "üîê Rotacionando chave secreta do servidor..."

# Configura√ß√µes
CONFIG_FILE="config/config.json"
BACKUP_DIR="config/backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Verificar se arquivo de configura√ß√£o existe
if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ùå Erro: Arquivo $CONFIG_FILE n√£o encontrado!"
    exit 1
fi

# Criar diret√≥rio de backup se n√£o existir
mkdir -p "$BACKUP_DIR"

# Fazer backup do config atual
echo "üìÅ Criando backup do config atual..."
cp "$CONFIG_FILE" "$BACKUP_DIR/config_backup_$TIMESTAMP.json"
echo "‚úÖ Backup salvo em: $BACKUP_DIR/config_backup_$TIMESTAMP.json"

# Gerar nova chave secreta (64 caracteres aleat√≥rios)
echo "üé≤ Gerando nova chave secreta..."
NEW_SECRET_KEY=$(openssl rand -hex 32)

# Verificar se openssl est√° dispon√≠vel
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  openssl n√£o encontrado, usando m√©todo alternativo..."
    # M√©todo alternativo usando /dev/urandom
    NEW_SECRET_KEY=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 64)
fi

echo "üîë Nova chave gerada: ${NEW_SECRET_KEY:0:16}...(truncada para seguran√ßa)"

# Obter a chave atual para compara√ß√£o
CURRENT_KEY=$(grep -o '"secretKey": "[^"]*"' "$CONFIG_FILE" | cut -d'"' -f4)
echo "üîí Chave atual: ${CURRENT_KEY:0:16}...(truncada para seguran√ßa)"

# Atualizar o config.json usando sed
echo "üìù Atualizando arquivo de configura√ß√£o..."

# Usar sed para substituir a chave secreta
sed -i.bak "s/\"secretKey\": \"$CURRENT_KEY\"/\"secretKey\": \"$NEW_SECRET_KEY\"/" "$CONFIG_FILE"

# Verificar se a substitui√ß√£o foi bem-sucedida
if grep -q "$NEW_SECRET_KEY" "$CONFIG_FILE"; then
    echo "‚úÖ Chave secreta atualizada com sucesso!"
    
    # Remover arquivo .bak criado pelo sed
    rm -f "${CONFIG_FILE}.bak"
    
    # Mostrar informa√ß√µes da nova configura√ß√£o
    echo ""
    echo "üìã Resumo da opera√ß√£o:"
    echo "   ‚Ä¢ Backup salvo em: $BACKUP_DIR/config_backup_$TIMESTAMP.json"
    echo "   ‚Ä¢ Nova chave: $NEW_SECRET_KEY"
    echo "   ‚Ä¢ Arquivo atualizado: $CONFIG_FILE"
    echo ""
    
    # Verificar se o servidor est√° rodando
    if pgrep -f "node.*server.js" > /dev/null; then
        echo "‚ö†Ô∏è  ATEN√á√ÉO: O servidor est√° rodando!"
        echo "   Para que a nova chave seja aplicada, voc√™ precisa reiniciar o servidor:"
        echo "   1. Pare o servidor atual (Ctrl+C ou kill)"
        echo "   2. Execute: ./start.sh"
        echo "   3. Ou use: sudo systemctl restart lnd-rpc-js (se usando como servi√ßo)"
        echo ""
    fi
    
    # Mostrar exemplo de uso da nova chave
    echo "üîß Para testar a nova chave:"
    echo "   curl -H \"x-secret-key: $NEW_SECRET_KEY\" http://localhost:5002/balance/bitcoin"
    echo ""
    
    # Atualizar arquivo de teste se existir
    if [ -f "test.sh" ]; then
        echo "üß™ Atualizando chave no script de teste..."
        sed -i "s/SECRET_KEY=\"[^\"]*\"/SECRET_KEY=\"$NEW_SECRET_KEY\"/" test.sh
        echo "‚úÖ Script test.sh atualizado com a nova chave"
    fi
    
else
    echo "‚ùå Erro: Falha ao atualizar a chave secreta!"
    echo "   Restaurando backup..."
    cp "$BACKUP_DIR/config_backup_$TIMESTAMP.json" "$CONFIG_FILE"
    echo "‚úÖ Configura√ß√£o restaurada do backup"
    exit 1
fi

echo ""
echo "üéâ Rota√ß√£o de chave conclu√≠da com sucesso!"
echo "   Lembre-se de atualizar todos os clientes que usam este servidor"
echo "   com a nova chave secreta."
